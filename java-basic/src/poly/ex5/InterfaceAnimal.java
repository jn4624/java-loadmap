package poly.ex5;

/**
 * 인터페이스를 사용해야 하는 이유
 *
 * 모든 메서드가 추상 메서드인 경우 순수 추상 클래스를 만들어도 되고, 인터페이스를 만들어도 된다.
 * 그런데 왜 인터페이스를 사용해야 할까?
 * 단순히 편리하다는 이유를 넘어서 다음과 같은 이유가 있다.
 *
 * 제약 - 인터페이스를 만드는 이유는 인터페이스를 구현하는 곳에서 인터페이스의 메서드를 반드시 구현하라는 규약(제약)을 주는 것이다.
 *       USB 인터페이스를 생각해보자.
 *       USB 인터페이스에 맞추어 키보드, 마우스를 개발하고 연결해야 한다.
 *       그렇지 않으면 작동하지 않는다.
 *       인터페이스의 규약(제약)은 반드시 구현해야 하는 것이다.
 *       그런데 순수 추상 클래스의 경우 미래에 누군가 그곳에 실행 가능한 메서드를 끼워 넣을 수 있다.
 *       이렇게 되면 추가된 기능을 자식 클래스에서 구현하지 않을 수도 있고, 또 더는 순수 추상 클래스가 아니게 된다.
 *       인터페이스는 모든 메서드가 추상 메서드이다.
 *       따라서 이런 문제를 원천 차단할 수 있다.
 *
 * 다중구현 - 자바에서 클래스 상속은 부모를 하나만 지정할 수 있다.
 *          반면에 인터페이스는 부모를 여러명 두는 다중 구현(다중 상속)이 가능하다.
 *          좋은 프로그램은 제약이 있는 프로그램이다.
 */
public interface InterfaceAnimal {
    void sound();
    void move();
}
